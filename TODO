Modificar GameSolver (Negascout y si es aplicable a Minimax)
	- Profundidad incremental empezando por el minimo que se graba hasta el maximo pedido
	- Al generar los movimientos, leer la heuristica de DB o calcularla y ordenar.
	- Añadir estadisticas de ahorro de calculo con accesos a DB
	- Implementar un Timeout. Tener siempre preparada la mejor respuesta a dar.
	- Opción de hacer un aleatorio entre las mejores jugadas que empaten en heuristica o escoger siempre una (por orden de generación, o canonico...)
	- Dar la opcion de que no pode en el nivel mas alto en findBestMoves. La razón es para que cuando se evalue un tablero, se graben en DB todos los hijos y no solo el padre.
	Ademas la ventaja es que en la busqueda por profundidad incremental, en cada paso se usara el resultado del anterior para ordenar los movimientos
Funcion de autojugar.
	Verificar con 3 en ralla que aprenda bien.
	Buscar bases de datos de partidas y hacer learning a partir de las mismas (chess, go, ...)
	Cuando juega consigo mismo, dar opcion a guardar la partida para analizarla (son las mejores jugadas)

Funcion jugar con humano (consola, sockets y websockets)
	Permanent Brain: Seguir calculando aunque el turno sea del jugador humano

En DB.
	Guardar un tablero especial con info sobre la version de la heuristica. Si no coincide, mostrar un error.
	La funcion heuristica ha de tener una version
	Otra posibilidad es que cada tablero guarde tambien la version de la heuristica, y así a equivalente depth se podrá actualizar. Se convivira con diferentes versiones (pensar si puede ser un problema).

Guardar e importar partidas en:
	Portable Game Notation(chess)

Guardar el nº de piezas en juego. Para evaluar finales de chess o checkers puede ser bueno que a igual heuristica, mejor menos piezas en juego (DB de finales)

Optimizaciones
	Pensar en la representacion de los boards para ver si puede ser más eficiente usar bits
	Igualmente generar keys mas cortas usando bits. (casillas de 2 en 2...)

Juegos
	juego 4 en ralla (conecta 4)
	juego damas
	juego damas chinas
	juego ajedrez
	juego GO
	solitarios (rubik, sudoku)
	poker

Ampliaciones
	Mas de 2 jugadores (damas de 4 por ejemplo)
	Azar (parchis)
	Visión parcial (poker)
	P2P de intercambio de resultados. (solo de cierto nivel)
	interface para usar motores de juegos para aprender (gnuchess)

Otros algoritmos
	A* para juegos tipo solitario. Pensar como implementar DB para acelerar la busqueda.
	Geneticos para los que A* es inviable.

Clientes
	html5 + websockets
	html5 + ajax
	Android + sockets
	Android + Ajax
	Android + native IA (en c++ o convertida en Java)
